define("core", function () {    var core = {};    core.domain = document.querySelector('[data-domain]') ? document.querySelector('[data-domain]').getAttribute('data-domain') : '//' + window.location.hostname;    core.appFiles = document.querySelector('[data-js-files]') ? JSON.parse(document.querySelector('[data-js-files]').getAttribute('data-js-files')) : [];    core.appLibs = document.querySelector('[data-js-libs]') ? JSON.parse(document.querySelector('[data-js-libs]').getAttribute('data-js-libs')) : [];    core.userLanguage = document.querySelector('[lang]') ? document.querySelector('[lang]').getAttribute('lang') : 'pt-br';    core.systemVersion = document.querySelector('[system-version]') ? document.querySelector('[system-version]').getAttribute('system-version') : '1.0.0';    core.gkey = 'AIzaSyB5rXnYXcSiu8CotX4unNzy6KFAXsh7yFI';    core.max_messages = 3;    core.default_selector = document.querySelector("#controleonline") || '*';    core.css_loaded = [];    core.config = function () {        var config = {            waitSeconds: 0,            baseUrl: '/vendor/',            paths: {                gjsapi: 'https://www.google.com/jsapi' + '?c=' + core.systemVersion,                jinputmask: core.domain + '/vendor/jquery.inputmask/dist/min/jquery.inputmask.bundle.min',                natural: '//cdn.datatables.net/plug-ins/1.10.15/sorting/natural',                highcharts: core.domain + '/vendor/highcharts/highcharts'            },            shim: {                "jquery": {                    exports: "jQuery"                },                "bootstrap": {                    require: ["jquery"]                },                "jquery.select2": {                    require: ["jquery"]                },                "natural": {                    require: ["jquery", "datatables.net"]                }            }        };        Object.keys(core.appLibs).forEach(function (key) {            core.appLibs[key] = (core.format.isRelativeUrl(core.appLibs[key]) ? core.format.normalizeUrl(config.baseUrl + core.appLibs[key]) : core.format.normalizeUrl(core.appLibs[key])) + '?v=' + core.systemVersion;            config.paths[key] = core.appLibs[key];        });        Object.keys(core.appFiles).forEach(function (key) {            core.appFiles[key] = (core.format.isRelativeUrl(core.appFiles[key]) ? core.format.normalizeUrl(config.baseUrl + core.appFiles[key]) : core.format.normalizeUrl(core.appFiles[key])) + '.js?v=' + core.systemVersion;            config.paths[key] = core.appFiles[key];        });        requirejs.config(config);        return config;    };    core.format = {        normalizeUrl: function (url) {            if (core.format.isCompleteUrl(url))                return  url;            else                return core.domain + url;        },        isCompleteUrl: function (url) {            if (url.substr(0, 4) === "http" || url.substr(0, 5) === "https" || url.substr(0, 2) === "//")                return true;            else                return false;        },        isRelativeUrl: function (url) {            if (core.format.isCompleteUrl(url) || url.substr(0, 1) === "/")                return false;            else                return true;        },        isExternal: function (url) {            var match = url.match(/^([^:\/?#]+:)?(?:\/\/([^\/?#]*))?([^?#]+)?(\?[^#]*)?(#.*)?/);            if (typeof match[1] === "string" && match[1].length > 0 && match[1].toLowerCase() !== location.protocol)                return true;            if (typeof match[2] === "string" && match[2].length > 0 && match[2].replace(new RegExp(":(" + {"http:": 80, "https:": 443}[location.protocol] + ")?$"), "") !== location.host)                return true;            return false;        }    };    core.guid = function () {        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);            return v.toString(16);        });    };    core.ready = function () {        this.config();        requirejs(['jquery'], function (jQuery) {            if (jQuery.isReady) {                core.load.modules();                core.fire.hash();            }            jQuery(document).ready(function () {                core.load.modules();                core.fire.hash();            });        });    };    core.fire = {        hash: function () {            requirejs(['jquery', 'bootstrap'], function (jQuery) {                var hash = jQuery(location).attr('hash');                if (hash) {                    jQuery('[href="' + hash + '"]').click();                }            });        }    };    core.load = {        modules: function () {            document.querySelector('[data-js-files]').removeAttribute('data-js-files');            document.querySelector('[data-js-libs]').removeAttribute('data-js-libs');            core.bootstrap.init();            core.ajax.init();            core.bind();            Object.keys(core.appFiles).forEach(function (key) {                requirejs([key], function (appFile) {                    if (typeof appFile !== 'undefined' && typeof appFile.init === 'function') {                        appFile.init();                    }                });            });            core.load.bind();        },        bind: function (selector) {            selector = selector ? selector : core.default_selector;            Object.keys(core.appFiles).forEach(function (key) {                requirejs([key], function (appFile) {                    if (typeof appFile !== 'undefined' && typeof appFile.bind === 'function') {                        appFile.bind(selector);                    }                });            });        }    };    core.ajax = {        init: function () {            jQuery.ajaxSetup({                xhrFields: {                    withCredentials: true                },                beforeSend: function () {                    var elem = jQuery('[data-clicked=true]');                    if (jQuery(elem).attr('data-refresh-url')) {                        if (!jQuery(elem).find('.ajax-spin-refresh').length) {                            jQuery(elem).append(core.show.spin('ajax-spin-refresh'));                            jQuery(elem).prop("disabled", true);                        }                    } else if (jQuery(elem).attr('data-add')) {                        if (!jQuery(elem).find('.ajax-spin-add').length) {                            jQuery(elem).append(core.show.spin('ajax-spin-add'));                            jQuery(elem).prop("disabled", true);                        }                    } else if (jQuery(elem).attr('data-delete')) {                        if (!jQuery(elem).find('.ajax-spin-delete').length) {                            jQuery(elem).append(core.show.spin('ajax-spin-delete'));                            jQuery(elem).prop("disabled", true);                        }                    } else if ((jQuery(elem).attr('data-save') || jQuery(elem).attr('data-wait'))) {                        if (!jQuery(elem).find('.ajax-spin-save').length) {                            jQuery(elem).append(core.show.spin('ajax-spin-save'));                            jQuery(elem).prop("disabled", true);                        }                    } else {                        var loading = '<div id="wait-modal" class="modal fade" tabindex="-1" role="dialog" data-keyboard="false"  data-backdrop="static">';                        loading += '<div class="loading-dialog">';                        loading += '<div class="loading-content">';                        loading += '<div class="loading-header" style="text-align: center">';                        loading += '</div>';                        loading += '<div class="loading-body">';                        loading += '<div>';                        loading += '<img src="/assets/img/loading.svg"/>';                        //loading += '<i class="fa fa-circle-o-notch fa-6x fa-6 fa-spin loading-spin" aria-hidden="true"></i>';                        loading += '</div>';                        loading += '</div>';                        loading += '<div class="loading-footer" style="text-align: center"></div>';                        loading += '</div>';                        loading += '</div>';                        loading += '</div>';                        loading += '</div>';                        if (!jQuery('body').find('#wait-modal').length) {                            jQuery('body').append(loading);                        }                        requirejs(['jquery', 'bootstrap'], function (jQuery) {                            jQuery('#wait-modal').modal('show');                        });                    }                },                complete: function (data) {                    var elem = jQuery('[data-clicked=true]');                    if (jQuery(elem).attr('data-refresh-url')) {                        jQuery(elem).find('.ajax-spin-refresh').remove();                        jQuery(elem).prop("disabled", false);                    } else if (jQuery(elem).attr('data-add')) {                        jQuery(elem).find('.ajax-spin-add').remove();                        jQuery(elem).prop("disabled", false);                    } else if (jQuery(elem).attr('data-delete')) {                        jQuery(elem).find('.ajax-spin-delete').remove();                        jQuery(elem).prop("disabled", false);                    } else if (jQuery(elem).attr('data-save') || jQuery(elem).attr('data-wait')) {                        jQuery(elem).find('.ajax-spin-save').remove();                        jQuery(elem).prop("disabled", false);                    }                    requirejs(['jquery', 'bootstrap'], function (jQuery) {                        jQuery('#wait-modal,#confirm-delete').modal('hide');                    });                    core.show.result(data, jQuery(elem));                },                error: function (jqXHR, x, ajaxOptions, exception) {                    var message;                    var statusErrorMap = {                        '400': "Server understood the request, but request content was invalid.",                        '401': "Unauthorized access.",                        '403': "Forbidden resource can't be accessed.",                        '500': "Internal server error.",                        '503': "Service unavailable.",                        '404': "Page not found."                    };                    if (jqXHR.status) {                        message = statusErrorMap[jqXHR.status];                        if (!message) {                            message = "Unknown Error \n.";                        }                    } else if (exception == 'parsererror') {                        message = "Error.\nParsing JSON Request failed.";                    } else if (exception == 'timeout') {                        message = "Request Time out.";                    } else if (exception == 'abort') {                        message = "Request was aborted by the server";                    } else {                        message = "Unknown Error \n.";                    }                    core.show.error(message);                }            });        }    };    core.show = {        login: function (login_box, caller) {            var caller_id = jQuery(caller).attr('id');            if (!caller_id) {                jQuery(caller).attr('id', core.guid());            }            jQuery(login_box).addClass('login-box-container');            jQuery(login_box).find('[data-success-url]').attr('data-fire-after-success', '#' + jQuery(caller).attr('id')).removeAttr('data-success-url');            jQuery(login_box).attr('data-remove-on-esc', true);            jQuery(login_box).hide();            jQuery(login_box).find('.app-body').prepend('<button type="button" class="close pull-right close-login close-modal">X</button>');            jQuery('body').prepend(login_box);            core.bind(login_box);            jQuery(login_box).fadeIn(500);        },        clear_messages: function () {            if (jQuery('.show-messages div').length > core.max_messages) {                var last = jQuery('.show-messages div').last();                jQuery(last).stop(true, true).slideUp(500, function () {                    jQuery(last).delay(500).remove();                });            }        },        spin: function (cssClass) {            return '<i class="' + cssClass + ' ajax-spin fa fa-spinner fa-spin"></i>';        },        result: function (data, e) {            if (typeof data === 'object') {                if (data.responseJSON) {                    var data = JSON.parse(data.responseText);                    if (data.response && data.response.success) {                        core.show.success(false, e, data);                        var fire = jQuery(e).data('fire-after-success');                        if (jQuery(fire).length) {                            jQuery('.login-box-container').fadeOut(500, function () {                                jQuery('.login-box-container').remove();                            });                            jQuery(fire).click();                        }                    } else if (data.response && data.response.error) {                        core.show.error(data.response.error, e);                    } else {                        core.show.error(false, e);                    }                } else if (data.responseText) {                    var response = jQuery(data.responseText);                    var need_login = jQuery(response).find('[data-need-login=true]');                    if (need_login.length) {                        core.show.login(need_login, jQuery(e));                    } else {                        if (jQuery(e).data('refresh-container')) {                            jQuery.each(eval(jQuery(e).data('refresh-container')), function (index, q) {                                jQuery(q).fadeOut(1000, function () {                                    jQuery(q).html('');                                    jQuery(q).html(jQuery(response).find(q).html()).fadeIn("slow");                                    core.load.bind(jQuery(q));                                    core.bind(jQuery(q));                                });                            });                        } else if (response.hasClass('modal')) {                            var id = response.attr('id');                            if (!id) {                                id = Date.now() / 1000 | 0;                                response.attr('id', id);                            }                            if (jQuery('body').find('#' + id).length) {                                jQuery('body').find('#' + id).remove();                            }                            jQuery('body').append(response);                            jQuery('body').find('#' + id).modal('show');                            core.load.bind('#' + id);                            core.bind('#' + id);                        }                    }                    if (jQuery('body').find('.modal').is(":visible")) {                        jQuery('body').attr('data-no-scroll', true);                    }                    requirejs(['jquery', 'bootstrap'], function (jQuery) {                        jQuery('#wait-modal,#confirm-delete').modal('hide');                    });                    var fire = jQuery(e).data('fire-after-success');                    if (jQuery(fire).length) {                        jQuery('.login-box-container').fadeOut(500, function () {                            jQuery('.login-box-container').remove();                        });                        jQuery(fire).click();                    }                } else {                    core.show.error((data.response && data.response.error) ? data.response.error : null, e);                    return;                }            } else {                core.show.error(false, e);            }            core.show.clear_messages();        },        error: function (error, e) {            if (!error || typeof error === 'undefined') {                return;            }            if (typeof error === 'object') {                jQuery.each(error, function (key, value) {                    core.show.error(value.message ? value.message : value);                });                return;            }            var id = core.guid();            var msg = '<div style="display:none" id="message-' + id + '" class="message-' + id + ' alert alert-danger fade in alert-dismissable">';            msg += '<strong>';            msg += error;            msg += '<button class="close">X</button>';            msg += '</strong>';            msg += '</div>';            core.show.messageContainer();            jQuery(msg).prependTo(jQuery('.show-messages'));            jQuery(".message-" + id).slideDown(1000).delay(10000).slideUp(1000, function () {                jQuery(".message-" + id).remove();            });            jQuery(".message-" + id).find(".close").on("click", function () {                jQuery(".message-" + id).stop(true, true).slideUp(1000, function () {                    jQuery(".message-" + id).delay(2000).remove();                });            });            core.show.clear_messages();        },        messageContainer: function () {            if (jQuery('.show-messages').length < 1) {                jQuery('<div class="show-messages row"></div>').prependTo('body');            }        },        success: function (success, e, data) {            success = success ? success : 'Sucesso!';            if (typeof success === 'object') {                jQuery.each(success, function (key, value) {                    core.show.success(value.message ? value.message : value);                });                return;            }            var id = core.guid();            var msg = '<div style="display:none" id="message-' + id + '" class="message-' + id + ' alert alert-success fade in alert-dismissable">';            msg += '<strong>';            msg += success;            msg += '<button class="close">X</button>';            msg += '</strong>';            msg += '</div>';            core.show.messageContainer();            jQuery(msg).prependTo(jQuery('.show-messages'));            jQuery(".message-" + id).slideDown(1000).delay(3000).slideUp(1000, function () {                jQuery(".message-" + id).remove();            });            jQuery(".message-" + id).find(".close").on("click", function () {                jQuery(".message-" + id).stop(true, true).slideUp(1000, function () {                    jQuery(".message-" + id).delay(2000).remove();                });            });            core.load.bind(".message-" + id);            if (jQuery(jQuery(e).data('clone-field')) && jQuery(jQuery(e).data('clone-target'))) {                core.show.clone(data, jQuery(e).data('clone-field'), jQuery(e).data('clone-target'), jQuery(e).data('clear-clone-target') ? true : false);            }            if (jQuery(jQuery(e).data('table-field')) && jQuery(e).data('table-row-fields')) {                core.show.table(data, jQuery(e).data('table-field'), jQuery(e).data('table-row-fields'));            }            if (jQuery(e).data('success-url')) {                if (window.location.href == jQuery(e).data('success-url')) {                    window.location.reload();                } else {                    window.location.href = jQuery(e).data('success-url');                }            }            core.show.clear_messages();        },        table: function (data, table, row_fields) {            if (typeof data === 'object' && typeof data.response === 'object' && typeof data.response.data === 'object') {                var first = data.response.data[Object.keys(data.response.data)[0]];                if (!Array.isArray(first) && typeof first !== 'object') {                    data.response.data = [data.response.data];                }                var fields = row_fields.split(",");                var new_data = [];                var c = 0;                jQuery.each(data.response.data, function (k, v) {                    new_data[c] = [];                    jQuery.each(fields, function (kk, vv) {                        new_data[c].push(v[vv] ? v[vv] : '');                    });                    c++;                });                if (new_data) {                    var xo = jQuery(table).DataTable();                    xo.rows.add(new_data).draw(false);                }            }        },        clone: function (data, clone_field, clone_target, clear_target) {            if (clear_target) {                jQuery(clone_target).html('');            }            if (typeof data === 'object' && typeof data.response === 'object' && typeof data.response.data === 'object') {                var first = data.response.data[Object.keys(data.response.data)[0]];                if (!Array.isArray(first) && typeof first !== 'object') {                    data.response.data = [data.response.data];                }                jQuery.each(data.response.data, function (k, v) {                    var c = jQuery(clone_field).clone();                    jQuery.each(v, function (key, value) {                        jQuery(c).find('[name="' + key + '"]').attr('value', value);                    });                    jQuery.each(v, function (key, value) {                        c = jQuery('<div>').append(jQuery(c)).html().replace(new RegExp('{' + key + '}', 'g'), value);                    });                    jQuery(clone_target).append(jQuery(c).hide().removeClass('clone').removeClass('hidden').removeAttr('data-clone').hide(function () {                        core.bind(this);                        jQuery(this).delay(200).fadeIn();                    }));                });            }        }    };    core.postmon = {        init: function (selector) {            var address_search = jQuery(selector).find('[data-postmon=address-search]');            if (address_search.length > 0) {                requirejs(['Postmon', 'GMaps', 'gjsapi'], function (Postmon, GMaps) {                    if (Postmon) {                        Postmon.init(address_search);                    }                    if (GMaps) {                        GMaps.init.panoramio(core.gkey, address_search);                    }                });            }        }    };    core.gmaps = {        init: function (selector) {            var address_search = jQuery(selector).find('[data-gmaps=address-search]');            if (address_search.length > 0) {                requirejs(['GMaps', 'gjsapi'], function (GMaps) {                    if (GMaps) {                        GMaps.init.address_search(core.gkey, address_search);                        GMaps.init.panoramio(core.gkey, address_search);                    }                });            }        }    };    core.gtranslator = {        init: function (selector) {            var gtranslate = jQuery(selector).find('[data-translate]');            if (gtranslate.length > 0) {                requirejs(['GTranslator', 'core'], function (GTranslator, core) {                    if (GTranslator) {                        GTranslator.init(core.gkey);                    }                });            }        }    };    core.contacts = {        init: function (selector) {            var choose_contacts = jQuery(selector).find("[data-choose-contacts]");            if (choose_contacts.length > 0) {                jQuery(choose_contacts).each(function () {                    var t = jQuery(this);                    jQuery(t).change(function () {                        var container = jQuery(jQuery(t).data('choose-contacts'));                        jQuery(container).find('input[data-contact-name]').val(jQuery(jQuery(t).find(':selected')).data('contact-name'));                        jQuery(container).find('input[data-contact-email]').val(jQuery(jQuery(t).find(':selected')).data('contact-email'));                        jQuery(container).find('input[data-contact-ddd]').val(jQuery(jQuery(t).find(':selected')).data('contact-ddd'));                        jQuery(container).find('input[data-contact-phone]').val(jQuery(jQuery(t).find(':selected')).data('contact-phone'));                    });                });            }        }    };    core.charts = {        init: function (selector) {            var highcharts = $(selector).find('[data-highcharts]');            if (highcharts.length > 0) {                requirejs(['jquery', 'core', 'highcharts'], function (jQuery, core) {                    jQuery(highcharts).each(function () {                        Highcharts.setOptions({                            lang: {                                decimalPoint: ',',                                thousandsSep: '.'                            }                        });                        Highcharts.chart(jQuery(this).data('chart-containter'),                                {                                    tooltip: eval(jQuery(this).data('chart-tooltip')),                                    chart: {                                        type: 'line',                                        zoomType: 'x'                                    },                                    title: {                                        text: jQuery(this).data('chart-title')                                    },                                    subtitle: {                                        text: jQuery(this).data('chart-subtitle')                                    },                                    xAxis: {                                        categories: eval(jQuery(this).data('categories')),                                        type: 'datetime'                                    },                                    legend: {                                        layout: 'vertical',                                        align: 'right',                                        verticalAlign: 'middle'                                    },                                    yAxis: {                                        title: {                                            text: jQuery(this).data('chart-vertical-title')                                        }                                    },                                    plotOptions: {                                        series: {                                            label: {                                                connectorAllowed: false                                            }                                        },                                        line: {                                            dataLabels: {                                                enabled: false                                            },                                            enableMouseTracking: true                                        }                                    },                                    series: eval(jQuery(this).data('highcharts')),                                    responsive: {                                        rules: [{                                                condition: {                                                    maxWidth: 500                                                },                                                chartOptions: {                                                    legend: {                                                        layout: 'horizontal',                                                        align: 'center',                                                        verticalAlign: 'bottom'                                                    }                                                }                                            }]                                    }                                }                        );                    });                });            }        }    };    core.datepicker = {        init: function (selector) {            var datepicker = $(selector).find('.input-daterange input')            if (datepicker.length > 0) {                requirejs(['core', 'bootstrap-datepicker'], function (core) {                    core.loadCss('bootstrap-datepicker/dist/css/bootstrap-datepicker3.css');//                    jQuery('.input-daterange').datepicker({//                        format: "yyyy-mm-dd",//                        clearBtn: true,//                        language: "pt-BR",//                        todayHighlight: true//                    });                    jQuery('.datepicker').each(function () {                        var t = jQuery(this);                        jQuery(t).datepicker({                            format: "yyyy-mm-dd",                            clearBtn: true,                            language: "pt-BR",                            todayHighlight: true,                            autoclose: true                        });                        t.on('changeDate', function () {                            jQuery(jQuery(t.data('hidden'))).val(jQuery(t).datepicker('getFormattedDate'));                        });                    });                });            }        }    };    core.address = {        init: function (selector) {            var choose_address = jQuery(selector).find("[data-choose-address]");            if (choose_address.length > 0) {                jQuery(choose_address).each(function () {                    var t = jQuery(this);                    jQuery(t).change(function () {                        var container = jQuery(jQuery(t).data('choose-address'));                        jQuery(container).find('input[data-address-nickname]').val(jQuery(jQuery(t).find(':selected')).data('address-nickname'));                        jQuery(container).find('input[data-cep]').val(jQuery(jQuery(t).find(':selected')).data('cep'));                        jQuery(container).find('input[data-street]').val(jQuery(jQuery(t).find(':selected')).data('street'));                        jQuery(container).find('input[data-address-number]').val(jQuery(jQuery(t).find(':selected')).data('address-number'));                        jQuery(container).find('input[data-complement]').val(jQuery(jQuery(t).find(':selected')).data('complement'));                        jQuery(container).find('input[data-district]').val(jQuery(jQuery(t).find(':selected')).data('district'));                        jQuery(container).find('input[data-city]').val(jQuery(jQuery(t).find(':selected')).data('city'));                        jQuery(container).find('input[data-state]').val(jQuery(jQuery(t).find(':selected')).data('state'));                        jQuery(container).find('input[data-country]').val(jQuery(jQuery(t).find(':selected')).data('country'));                        jQuery(container).find('input[data-street]').trigger('change');                        if (!jQuery(jQuery(t).find(':selected')).val()) {                            jQuery(container).find('.address-input-toggle').removeClass('hidden');                        } else {                            jQuery(container).find('.address-input-toggle').addClass('hidden');                        }                    });                });            }        }    };    core.bind = function (selector) {        selector = selector ? selector : core.default_selector;        core.lazyLoad.init(selector);        core.crud.init.add(jQuery(selector).find("[data-add]"));        core.crud.init.refresh(jQuery(selector).find("[data-refresh-url]"));        core.crud.init.addForm(jQuery(selector).find("[data-add-form]"));        core.crud.init.save(jQuery(selector).find("[data-save]"));        core.crud.init.clone(jQuery(selector).find("[data-clone-type=simple-clone]"));        core.crud.init.remove(jQuery(selector).find("[data-remove-type=simple-remove]"));        core.crud.init.deleteConfirm(jQuery(selector).find("[data-delete-confirm]"));        core.formValidator.init(jQuery(selector).find("form"));        core.inputMask.init.mask(jQuery(selector).find("[data-mask]"));        core.autocomplete.init(jQuery(selector));        core.inputMask.init.maskRegex(jQuery(selector).find("[data-mask-regex]"));        core.dataTables.init(selector);        core.gmaps.init(selector);        core.postmon.init(selector);        core.gtranslator.init(selector);        core.address.init(selector);        core.contacts.init(selector);        core.datepicker.init(selector);        core.charts.init(selector);        jQuery(document).keyup(function (e) {            if (e.keyCode == 27) {                jQuery(selector).find('[data-remove-on-esc="true"]').fadeOut().remove();            }        });        jQuery(selector).find('.close-modal').click(function () {            jQuery('[data-remove-on-esc="true"]').fadeOut().remove();        });        jQuery('.pdf-container').each(function () {            var width = jQuery('.tab-content').width() * 1.4;            jQuery(this).height(width);        });        var iframe = jQuery(selector).find('iframe[name="SHOPLINE"]');        if (iframe) {            jQuery('[href="#order-invoice"]').click(function () {                if (jQuery(iframe).attr('data-loaded') !== 'true' && jQuery('iframe[name="INVOICE-SHOPLINE"]').length > 0) {                    jQuery('#itau-form-payment').submit();                    jQuery(iframe).attr('data-loaded', 'true');                }            });        }        jQuery(selector).find('[name="Shopline"]').each(function () {            jQuery(this).click(function (e) {                window.open('', 'SHOPLINE', 'toolbar=yes,menubar=yes,resizable=yes,status=no,scrollbars=yes,width=815,height=575');            });        });        if (jQuery(selector).find('.fileupload').length > 0) {            requirejs(['blueimp-file-upload'], function () {                jQuery(selector).find('.fileupload').each(function () {                    var t = this;                    jQuery(t).fileupload({                        url: jQuery(t).data('url'),                        formData: jQuery(t).closest('form').serializeArray(),                        dataType: 'json',                        done: function (e, data) {                            jQuery.each(data.result.files, function (index, file) {                                jQuery('<p/>').text(file.name).appendTo('#files');                            });                        },                        progressall: function (e, data) {                            var progress = parseInt(data.loaded / data.total * 100, 10);                            jQuery(jQuery(t).data('progress-bar')).css(                                    'width',                                    progress + '%'                                    );                        }                    }).prop('disabled', !jQuery.support.fileInput)                            .parent().addClass(jQuery.support.fileInput ? undefined : 'disabled');                });            });        }        jQuery(selector).find('[data-toggle-class]').click(function () {            jQuery(jQuery(this).data('toggle-container')).toggleClass('hidden');        });        jQuery(selector).find('[data-change-container]').change(function () {            var containers = jQuery(this).data('change-container').split(",");            var form = jQuery(this).closest('form');            var url = jQuery(form).attr('action');            jQuery.ajax({                url: core.domain + url,                context: document.body,                data: jQuery(form).serialize(),                method: jQuery(form).attr('method'),                success: function (data) {                    jQuery(containers).each(function (key, container) {                        var result = jQuery(data).find(container).html();                        jQuery(container).html(result);                        core.bind(container);                    });                }            }).done(function () {                window.history.pushState('page2', 'Title', core.domain + url + '?' + jQuery(form).serialize());            });        });        jQuery(selector).find('[data-load-script]').each(function () {            var load = eval(jQuery(this).data('load-script'));            var config = core.config();            Object.keys(load).forEach(function (key) {                config.paths[key] = load[key] + '.js?v=' + core.systemVersion;            });            requirejs.config(config);            Object.keys(load).forEach(function (key) {                requirejs([key], function (appFile) {                    if (typeof appFile !== 'undefined' && typeof appFile.init === 'function') {                        appFile.init();                    }                    if (typeof appFile !== 'undefined' && typeof appFile.bind === 'function') {                        appFile.bind(selector);                    }                });            });            jQuery(this).removeAttr('data-load-script');        });        jQuery(selector).find('[data-container-hide-on-change]').each(function () {            var t = jQuery(this);            jQuery(t).change(function () {                jQuery(jQuery(t).data('container-hide-on-change')).fadeOut();            });        });        jQuery(selector).find('[data-container-show-on-change]').each(function () {            var t = jQuery(this);            jQuery(t).change(function () {                jQuery(jQuery(t).data('container-show-on-change')).delay(500).fadeIn();            });        });        jQuery(selector).find('[data-show]').each(function () {            var t = jQuery(this);            jQuery(t).click(function () {                jQuery(jQuery(t).data('hide')).fadeOut(500, function () {                    jQuery(jQuery(t).data('show')).fadeIn(500);                });            });        });        jQuery('*').on('hidden.bs.modal', function () {            if (!jQuery('body').find('.modal').is(":visible")) {                jQuery('*').removeAttr('data-no-scroll');            }        });        jQuery(selector).find("*").click(function (e) {            jQuery("*").removeAttr('data-clicked');            jQuery(e.target).attr("data-clicked", true);        });        jQuery(selector).find("*").focus(function (e) {            jQuery("*").removeAttr('data-clicked');            jQuery(e.target).attr("data-clicked", true);        });    };    core.crud = {        init: {            deleteConfirm: function (selector) {                if (jQuery(selector).length) {                    jQuery(selector).each(function () {                        jQuery(this).click(function (e) {                            e.preventDefault();                            core.crud.init.deleteModal(jQuery(this));                        });                    });                }            },            deleteModal: function (selector) {                if (jQuery(selector).length) {                    jQuery('#confirm-delete').remove();                    var delete_modal = '<div class="modal fade" id="confirm-delete" tabindex="-1" role="dialog" aria-hidden="true">';                    delete_modal += '<div class="modal-dialog">';                    delete_modal += '<div class="modal-content">';                    delete_modal += '<div class="modal-header">';                    delete_modal += jQuery(selector).data('header');                    delete_modal += '</div>';                    delete_modal += '<div class="modal-body">';                    delete_modal += jQuery(selector).data('body');                    delete_modal += '</div>';                    delete_modal += '<div class="modal-footer">';                    delete_modal += '<button type="button" class="btn btn-default" data-dismiss="modal">' + jQuery(selector).data('calcel-name') + '</button>';                    delete_modal += '<button data-success-url="' + jQuery(selector).data('success-url') + '" data-container-remove="' + jQuery(selector).data('container-remove') + '" data-id="' + jQuery(selector).data('id') + '" data-delete="' + jQuery(selector).data('delete-confirm') + '" name="delete-' + jQuery(selector).data('id') + '" id="delete-' + jQuery(selector).data('id') + '" type="button" class="delete btn btn-danger btn-ok">';                    delete_modal += jQuery(selector).data('delete-name');                    delete_modal += '</button>';                    delete_modal += '</div>';                    delete_modal += '</div>';                    delete_modal += '</div>';                    delete_modal += '</div>';                    jQuery('body').append(delete_modal);                    core.crud.init.delete(jQuery('body').find("[data-delete]"));                }            },            delete: function (selector) {                if (jQuery(selector).length) {                    jQuery(selector).each(function () {                        jQuery(this).click(function (e) {                            e.preventDefault();                            setTimeout(function () {                                jQuery.ajax({                                    url: core.format.normalizeUrl(jQuery(e.target).data('delete')),                                    data: {                                        id: jQuery(e.target).data('id')                                    },                                    method: 'POST',                                    dataType: 'json',                                    success: function (data, textStatus, jqXHR) {                                        if (data.response && data.response.success) {                                            jQuery('#' + jQuery(e.target).data('container-remove') + '-' + jQuery(e.target).data('id')).stop(true, true).slideUp(1000, function () {                                                jQuery(this).remove();                                            });                                        }                                    }                                });                            }, 100);                        });                    });                }            },            refresh: function (selector) {                if (jQuery(selector).length) {                    jQuery(selector).each(function () {                        var b = jQuery(this);                        b.click(function (e) {                            e.preventDefault();                            var form = (b).closest('form');                            if (form.valid()) {                                setTimeout(function () {                                    jQuery.ajax({                                        cache: false,                                        url: core.format.normalizeUrl(jQuery(b).data('refresh-url')),                                        context: document.body,                                        data: jQuery(form) ? jQuery(form).serialize() : null,                                        method: 'POST'                                    });                                }, 100);                            }                        });                    });                }            },            addForm: function (selector) {                if (jQuery(selector).length) {                    jQuery(selector).each(function () {                        var b = jQuery(this);                        b.click(function (e) {                            e.preventDefault();                            setTimeout(function () {                                jQuery.ajax({                                    cache: true,                                    url: core.format.normalizeUrl(jQuery(b).data('add-form')),                                    context: document.body                                });                            }, 100);                        });                    });                }            },            add: function (selector) {                if (jQuery(selector).length) {                    jQuery(selector).each(function () {                        jQuery(this).closest('form').submit(function (e) {                            e.preventDefault();                            setTimeout(function () {                                if (jQuery(e.target).closest('form').valid()) {                                    jQuery.ajax({                                        url: core.format.normalizeUrl(jQuery(e).attr('action')),                                        data: jQuery(e).serialize(),                                        method: 'POST',                                        dataType: 'json',                                        success: function (data, textStatus, jqXHR) {                                            if (data.response && data.response.success) {                                                jQuery('#modal-new').modal('hide');                                            }                                        }                                    });                                }                            }, 100);                        });                        jQuery(this).click(function (e) {                            e.preventDefault();                            setTimeout(function () {                                if (jQuery(e.target).closest('form').valid()) {                                    jQuery.ajax({                                        url: core.format.normalizeUrl(jQuery(e.target).data('add')),                                        data: jQuery(e.target).closest('form').serialize(),                                        method: 'POST',                                        dataType: 'json',                                        success: function (data, textStatus, jqXHR) {                                            if (data.response && data.response.success) {                                                jQuery('#modal-new').modal('hide');                                            }                                        }                                    });                                }                            }, 100);                        });                    });                }            },            remove: function (selector) {                if (jQuery(selector).length) {                    jQuery(selector).each(function () {                        jQuery(this).click(function (e) {                            e.preventDefault();                            setTimeout(function () {                                jQuery(jQuery(e.target).data('remove-target')).fadeOut(1000, function () {                                    jQuery(this).remove();                                })                            }, 100);                        });                    });                }            },            clone: function (selector) {                if (jQuery(selector).length) {                    jQuery(selector).each(function () {                        jQuery(this).click(function (e) {                            e.preventDefault();                            setTimeout(function () {                                var clone = jQuery(jQuery(e.target).data('clone-field')).clone().removeAttr('id');                                var t = jQuery(e.target).data('clone-target');                                var count = jQuery(t).data('count') ? (parseInt(jQuery(t).data('count')) + 1) : jQuery(t).find('.box-product-size').length;                                jQuery(t).data('count', count);                                var data = {response: {                                        data: {                                            key: count                                        }                                    }};                                core.show.clone(data, clone, t);                            }, 100);                        });                    });                }            },            save: function (selector) {                if (jQuery(selector).length) {                    jQuery(selector).each(function () {                        jQuery(this).click(function (e) {                            e.preventDefault();                            if (jQuery(e.target).closest('form').valid()) {                                setTimeout(function () {                                    jQuery.ajax({                                        url: core.format.normalizeUrl(jQuery(e.target).data('save')),                                        method: 'POST',                                        dataType: 'json',                                        data: jQuery(e.target).closest('form').serialize()                                    });                                }, 100);                            }                        });                    });                }            }        }    };    core.formValidator = {        init: function (selector) {            if (jQuery(selector).length) {                requirejs(['jquery', 'jquery-validation'], function (jQuery) {                    jQuery(selector).each(function () {                        jQuery(this).validate();                    });                });            }        }    };    core.inputMask = {        init: {            mask: function (selector) {                if (jQuery(selector).length) {                    requirejs(['jinputmask'], function () {                        jQuery(selector).each(function () {                            jQuery(this).inputmask(eval(jQuery(this).data('mask')));                        });                    });                }            },            maskRegex: function (selector) {                if (jQuery(selector).length) {                    requirejs(['jinputmask'], function () {                        jQuery(selector).each(function () {                            jQuery(this).inputmask('Regex', eval(jQuery(this).data('mask-regex')));                        });                    });                }            }        }    };    core.bootstrap = {        init: function () {            requirejs(['bootstrap']);        }    };    core.autocomplete = {        init: function (selector) {            if (jQuery(selector).find('[data-autocomplete=select]').length) {                requirejs(['Autocomplete'], function (Autocomplete) {                    Autocomplete.init.css();                    Autocomplete.init.select();                    Autocomplete.bind.select(selector);                });            }            if (jQuery(selector).find('[data-autocomplete-ajax-url]').length) {                requirejs(['Autocomplete'], function (Autocomplete) {                    Autocomplete.init.css();                    Autocomplete.bind.ajax.single(selector);                });            }            if (jQuery(selector).find('[data-autocomplete-multi-ajax-url]').length) {                requirejs(['Autocomplete'], function (Autocomplete) {                    Autocomplete.init.css();                    Autocomplete.bind.ajax.multi(selector);                });            }        }    };    core.lazyLoad = {        init: function (selector) {            if (jQuery(selector).find('[data-ll]').length) {                requirejs(['lazyLoad'], function (lazyLoad) {                    if (typeof lazyLoad === 'object') {                        lazyLoad.init();                    } else {                        core.lazyLoad.init(selector);                    }                });            }        }    };    core.dataTables = {        init: function (selector) {            if (jQuery(selector).find('.datatable').length) {                core.loadCss('datatables/media/css/dataTables.bootstrap4.min.css');                core.dataTables.bind(selector);            }        },        language: {            sEmptyTable: "Nenhum registro encontrado",            sInfo: "Mostrando de _START_ até _END_ de _TOTAL_ registros",            sInfoEmpty: "Mostrando 0 até 0 de 0 registros",            sInfoFiltered: "(Filtrados de _MAX_ registros)",            sInfoPostFix: "",            sInfoThousands: ".",            sLengthMenu: "_MENU_ resultados por página",            sLoadingRecords: "Carregando...",            sProcessing: "Processando...",            sZeroRecords: "Nenhum registro encontrado",            sSearch: "Pesquisar",            oPaginate: {                sNext: "Próximo",                sPrevious: "Anterior",                sFirst: "Primeiro",                sLast: "Último"            },            oAria: {                sSortAscending: ": Ordenar colunas de forma ascendente",                sSortDescending: ": Ordenar colunas de forma descendente"            }        },        bind: function (selector) {            requirejs(['datatables.net', 'dataTables-bootstrap'], function (dt) {                requirejs(['natural'], function () {                    jQuery(selector).find('.datatable').each(function (i) {                        var e = jQuery(this);                        //https://datatables.net/examples/ajax/custom_data_property.html                        //https://datatables.net/examples/server_side/custom_vars.html                        if (e.attr('data-source')) {                            e.DataTable({                                aaSorting: [],                                columnDefs: [                                    {type: 'natural-nohtml', targets: '_all'}                                ],                                destroy: true,                                language: core.dataTables.language,                                serverSide: true,                                ajax: {                                    url: e.attr('data-source')                                }                            });                        } else {                            e.DataTable({                                aaSorting: [],                                columnDefs: [                                    {type: 'natural-nohtml', targets: '_all'}                                ],                                destroy: true,                                language: core.dataTables.language                            });                        }                    });                });            });        }    };    core.loadCss = function (url, prepend) {        if (!core.css_loaded[url]) {            core.css_loaded[url] = url;            var baseURL = core.domain + requirejs.toUrl('.');            var link = document.createElement("link");            link.type = "text/css";            link.rel = "stylesheet";            link.href = baseURL + url;            if (jQuery('link [href="' + baseURL + url + '"]').length === 0) {                requirejs(['jquery'], function (jQuery) {                    if (prepend) {                        jQuery(document.getElementsByTagName("head")[0]).prepend(link);                    } else {                        jQuery(document.getElementsByTagName("head")[0]).append(link);                    }                });            }        }    };    return core;});requirejs(['core'], function (core) {    core.ready();});